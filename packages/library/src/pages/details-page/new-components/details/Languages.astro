---
import {
  getMediaItem,
  getMediaItems,
} from "../../../../content/get-media-items"
import { resolveLanguage } from "../../../../i18n/resolve-language"
import { useTranslate } from "../../../../i18n/use-translate"
import { detailsPagePath } from "../../../../utils/paths"
import Label from "./Label.astro"

interface Props {
  slug: string
}

const item = await getMediaItem(Astro.props.slug)

const { slug } = Astro.props
const translations = (await getMediaItems())
  .filter(
    (entry) => entry.data.commonId === item.data.commonId && entry.id !== slug,
  )
  .sort((a, b) => a.data.language.localeCompare(b.data.language))

const t = useTranslate(Astro.currentLocale)
const label = translations.length ? "ln.common.languages" : "ln.common.language"
---

{
  (
    <>
      <Label>{t(label)}</Label>
      <ul class="flex flex-wrap gap-2">
        <li class="flex rounded-lg border border-gray-200 px-2 py-1 text-gray-600 opacity-50">
          {resolveLanguage(item.data.language).name}
        </li>
        {translations.map((translation) => (
          <li class="flex rounded-lg border border-gray-200 px-2 py-1 text-gray-600 hover:bg-gray-200">
            <a
              href={detailsPagePath(Astro.currentLocale, translation)}
              hreflang={translation.data.language}
            >
              {resolveLanguage(translation.data.language).name}
            </a>
          </li>
        ))}
      </ul>
    </>
  )
}
