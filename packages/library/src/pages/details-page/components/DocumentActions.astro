---
import Icon from "../../../components/Icon"
import type { MediaItem } from "../../../content/content-schema"
import { useTranslate } from "../../../i18n/use-translate"

interface Props {
  mediaItem: MediaItem
  class?: string
}

const { mediaItem } = Astro.props
const t = useTranslate(Astro.currentLocale)

const contentUrls = mediaItem.contentUrls.map((url, index) => ({
  ...parseUrl(url),
  url,
  isPrimary: index === 0,
}))

function parseUrl(url: string): {
  icon: string
  text: string
  target?: string
} {
  if (url.endsWith(".pdf")) {
    return { icon: "mdi--eye-outline", text: "ln.details.read" }
  }
  if (url.endsWith(".epub")) {
    return { icon: "mdi--tray-download", text: "ln.details.download-epub" }
  }
  try {
    new URL(url)
    // is absolute url
    return {
      icon: "mdi--external-link",
      text: "ln.details.read-on-external-site",
      target: "_blank",
    }
  } catch {
    return { icon: "mdi--tray-download", text: "ln.details.download-file" }
  }
}
---

<div class="flex flex-col gap-2" class:list={[Astro.props.class]}>
  {
    contentUrls.map(({ icon, text, isPrimary, url, target }) => (
      <a
        class="dy-btn w-full"
        class:list={[isPrimary && "dy-btn-neutral"]}
        href={url}
        target={target ?? "_self"}
        hreflang={mediaItem.language}
      >
        <Icon class={icon} />
        {t(text)}
      </a>
    ))
  }
</div>
