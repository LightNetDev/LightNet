---
import config from "virtual:lightnet/config"

import { getCategories } from "../../content/get-categories"
import { getMediaItems } from "../../content/get-media-items"
import { getMediaTypes } from "../../content/get-media-types"
import { resolveLanguageLabel } from "../../i18n/resolve-language"
import { useTranslate } from "../../i18n/use-translate"
import Page from "../../layouts/Page.astro"
import Search from "./Search"
import { provideTranslations } from "./utils/search-translations"

export { getLocalePaths as getStaticPaths } from "../../i18n/get-locale-paths"

const media = await getMediaItems()
const t = useTranslate(Astro.currentLocale)

const contentLanguages: Record<string, string> = media
  .map((item) => item.data.language)
  .sort((a, b) => a.localeCompare(b))
  .reduce(
    (prev, language) => ({
      ...prev,
      [language]: resolveLanguageLabel(language),
    }),
    {},
  )

const categories: Record<string, string> = (await getCategories()).reduce(
  (prev, { id, label }) => ({
    ...prev,
    [id]: label,
  }),
  {},
)

const mediaTypes = (await getMediaTypes())
  .map((type) => ({
    id: type.id,
    label: t(type.data.label),
    icon: type.data.icon,
  }))
  .sort((a, b) =>
    a.label.localeCompare(b.label, Astro.currentLocale ?? config.defaultLocale),
  )
---

<Page>
  <div class="mx-auto max-w-screen-lg">
    <Search
      client:load
      contentLanguages={contentLanguages}
      mediaTypes={mediaTypes}
      translations={provideTranslations(t)}
      locale={Astro.currentLocale}
      categories={categories}
    />
  </div>
</Page>
