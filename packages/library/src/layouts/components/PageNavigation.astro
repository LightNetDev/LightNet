---
import config from "virtual:lightnet/config"

import Icon from "../../components/Icon"
import { useTranslate } from "../../i18n/use-translate"
import { localizePath, searchPagePath } from "../../utils/paths"
import { isExternalUrl } from "../../utils/urls"
import LanguagePicker from "./LanguagePicker.astro"
import Menu from "./Menu.astro"
import MenuItem from "./MenuItem.astro"

const t = useTranslate(Astro.currentLocale)

const currentPath = Astro.url.pathname
const items = (config.mainMenu ?? []).map(({ href, label, requiresLocale }) => {
  const isExternal = isExternalUrl(href)
  const path =
    isExternal || !requiresLocale
      ? href
      : localizePath(Astro.currentLocale, href)
  const isActive =
    !isExternal &&
    (currentPath === localizePath(Astro.currentLocale, href) ||
      currentPath === localizePath(Astro.currentLocale, `${href}/`) ||
      currentPath === href)
  return {
    path,
    isExternal,
    label,
    isActive,
  }
})
---

<nav class="-mr-3 flex items-center">
  <a
    class="hover:text-primary flex p-3 text-gray-600"
    aria-label={t("ln.search.title")}
    data-astro-prefetch="viewport"
    href={searchPagePath(Astro.currentLocale)}
    ><Icon className="mdi--magnify" /></a
  >
  <LanguagePicker />

  {
    !!items.length && (
      <Menu icon="mdi--menu" label="ln.header.a11y.open-main-menu">
        {items.map(({ label, path, isActive, isExternal }) => (
          <MenuItem
            href={path}
            active={isActive}
            target={isExternal ? "_blank" : "_self"}
          >
            {t(label, { fallbackToKey: true })}
            {isExternal && (
              <Icon className="mdi--external-link shrink-0 text-base" />
            )}
          </MenuItem>
        ))}
      </Menu>
    )
  }
</nav>
