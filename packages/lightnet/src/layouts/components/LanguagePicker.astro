---
import { resolveTranslatedLanguage } from "../../i18n/resolve-language"
import { localizePath } from "../../utils/paths"
import Menu from "./Menu.astro"
import MenuItem from "./MenuItem.astro"

const { t, locales } = Astro.locals.i18n

const translations = locales
  .map((locale) => ({
    locale,
    label: resolveTranslatedLanguage(locale, t).name,
    active: locale === Astro.currentLocale,
    href: currentPathWithLocale(locale),
  }))
  .sort((a, b) => a.label.localeCompare(b.label))

function currentPathWithLocale(locale: string) {
  const currentPath = Astro.url.pathname
  const currentPathWithoutLocale =
    Astro.currentLocale && currentPath.startsWith(`/${Astro.currentLocale}`)
      ? currentPath.slice(Astro.currentLocale.length + 1)
      : currentPath
  return localizePath(locale, currentPathWithoutLocale)
}
---

{
  translations.length > 1 && (
    <Menu icon="mdi--translate" label="ln.header.select-language">
      {translations.map(({ label, locale, active, href }) => (
        <MenuItem href={href} hreflang={locale} active={active}>
          {label}
        </MenuItem>
      ))}
    </Menu>
  )
}
