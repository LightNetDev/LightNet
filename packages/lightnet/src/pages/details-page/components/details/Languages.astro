---
import {
  getMediaItem,
  getMediaItems,
} from "../../../../content/get-media-items"
import { resolveTranslatedLanguage } from "../../../../i18n/resolve-language"
import { detailsPagePath } from "../../../../utils/paths"
import Label from "./Label.astro"

interface Props {
  slug: string
}

const item = await getMediaItem(Astro.props.slug)

const { slug } = Astro.props
const translations = (await getMediaItems())
  .filter(
    (entry) => entry.data.commonId === item.data.commonId && entry.id !== slug,
  )
  .sort((a, b) => a.data.language.localeCompare(b.data.language))

const { t } = Astro.locals.i18n
---

<div>
  <Label>{t("ln.languages", { count: translations.length })}</Label>
  <ul class="flex flex-wrap gap-2">
    <li class="py-1 pe-2 text-gray-800">
      {resolveTranslatedLanguage(item.data.language, t).name}
    </li>
    {
      translations.map((translation) => (
        <li class="flex rounded-lg border border-gray-200 px-4 py-1 text-gray-600 hover:bg-gray-200">
          <a
            href={detailsPagePath(Astro.currentLocale, translation)}
            hreflang={translation.data.language}
          >
            {resolveTranslatedLanguage(translation.data.language, t).name}
          </a>
        </li>
      ))
    }
  </ul>
</div>
