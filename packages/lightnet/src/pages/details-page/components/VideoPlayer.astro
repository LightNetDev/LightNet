---
import type { ImageMetadata } from "astro"
import { getImage } from "astro:assets"

interface Props {
  url: string
  title: string
  image: ImageMetadata
}

const { url, title, image: imageMetadata } = Astro.props

const { host, id, image } = await parseUrl(url)

async function parseUrl(urlToParse: string): Promise<{
  host: "youtube" | "vimeo" | "mp4"
  id: string | null
  image?: string
}> {
  const url = new URL(urlToParse)
  // https://www.youtube.com/embed/ABC123abc
  // https://www.youtube.com/watch?v=ABC123abc
  if (url.hostname === "www.youtube.com") {
    if (url.pathname.startsWith("/embed/")) {
      return { host: "youtube", id: url.pathname.slice(7) }
    }
    return { host: "youtube", id: url.searchParams.get("v") }
  }
  // https://youtu.be/ABC123abc
  if (url.hostname === "youtu.be") {
    return { host: "youtube", id: url.pathname.slice(1) }
  }
  // https://www.youtube-nocookie.com/embed/ABC123abc
  if (url.hostname === "www.youtube-nocookie.com") {
    return { host: "youtube", id: url.pathname.slice(7) }
  }
  // https://vimeo.com/12345678
  if (url.hostname === "vimeo.com") {
    return { host: "vimeo", id: url.pathname.slice(1) }
  }
  // https://player.vimeo.com/video/12345678
  if (url.hostname === "player.vimeo.com") {
    return { host: "vimeo", id: url.pathname.slice(7) }
  }

  // https://domain.com/video.mp4
  if (url.pathname.endsWith(".mp4")) {
    const image = (await getImage({ src: imageMetadata, format: "webp" })).src
    return { host: "mp4", id: url.toString(), image }
  }
  throw Error(`Unsupported video url: ${urlToParse}`)
}
---

{
  host === "youtube" ? (
    <iframe
      class="h-full w-full"
      src={`https://www.youtube-nocookie.com/embed/${id}`}
      title={title}
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
      referrerpolicy="strict-origin-when-cross-origin"
      allowfullscreen
    />
  ) : host === "vimeo" ? (
    <iframe
      class="h-full w-full"
      src={`https://player.vimeo.com/video/${id}`}
      allow="autoplay; fullscreen; picture-in-picture"
      allowfullscreen
    />
  ) : host === "mp4" ? (
    <video class="h-full w-full" controls preload="auto" poster={image}>
      <source src={id} type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  ) : null
}
