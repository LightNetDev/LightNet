---
import type { ImageMetadata } from "astro"
import { getImage } from "astro:assets"

interface Props {
  /**
   * Url of the video. This can be YouTube, vimeo, or a mp4 file.
   */
  url: string
  /**
   * Title attribute of the video. Used for screen readers.
   */
  title?: string
  /**
   * Poster image to use for the mp4 video player.
   */
  image?: ImageMetadata
}

const { url, title, image: imageMetadata } = Astro.props

const { host, id, image } = await parseUrl(url)

async function parseUrl(urlToParse: string): Promise<{
  host: "youtube" | "vimeo" | "mp4"
  id: string | null
  image?: string
}> {
  const url = new URL(urlToParse)
  // https://www.youtube.com/embed/ABC123abc
  // https://www.youtube.com/watch?v=ABC123abc
  if (url.hostname === "www.youtube.com") {
    if (url.pathname.startsWith("/embed/")) {
      return { host: "youtube", id: url.pathname.slice(7) }
    }
    return { host: "youtube", id: url.searchParams.get("v") }
  }
  // https://youtu.be/ABC123abc
  if (url.hostname === "youtu.be") {
    return { host: "youtube", id: url.pathname.slice(1) }
  }
  // https://www.youtube-nocookie.com/embed/ABC123abc
  if (url.hostname === "www.youtube-nocookie.com") {
    return { host: "youtube", id: url.pathname.slice(7) }
  }
  // https://vimeo.com/12345678
  if (url.hostname === "vimeo.com") {
    return { host: "vimeo", id: url.pathname.slice(1) }
  }
  // https://player.vimeo.com/video/12345678
  if (url.hostname === "player.vimeo.com") {
    return { host: "vimeo", id: url.pathname.slice(7) }
  }

  // https://domain.com/video.mp4
  if (url.pathname.endsWith(".mp4")) {
    const image =
      imageMetadata &&
      (await getImage({ src: imageMetadata, format: "webp" })).src
    return { host: "mp4", id: url.toString(), image }
  }
  throw Error(`Unsupported video url: ${urlToParse}`)
}
---

<div class="aspect-video w-full overflow-hidden bg-black md:rounded-lg">
  {
    host === "youtube" ? (
      <iframe
        class="h-full w-full"
        src={`https://www.youtube-nocookie.com/embed/${id}`}
        title={title}
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin"
        allowfullscreen
      />
    ) : host === "vimeo" ? (
      <iframe
        class="h-full w-full"
        title={title}
        src={`https://player.vimeo.com/video/${id}`}
        allow="autoplay; fullscreen; picture-in-picture"
        allowfullscreen
      />
    ) : host === "mp4" ? (
      <video class="h-full w-full" controls preload="auto" poster={image}>
        <source src={id} type="video/mp4" />
      </video>
    ) : null
  }
</div>
