---
import { sectionMaxWidths, sectionMarginTopValues } from "./constants"
import Icon from "./Icon"

export interface Props {
  /**
   * Id to set to the section element.
   * For example this can be used to reference it inside anchors.
   */
  id?: string
  /**
   * Maximum width of the section container. This limits how wide the section grows
   * on bigger screens. After reaching this width the section will be centered horizontally.
   *
   * - "wide" (1280 px) is the maximum homepage width.
   * - "narrow" (768 px) is the maximum details page width. Optimized for good text readability.
   *
   * @default "wide"
   */
  maxWidth?: "wide" | "narrow"
  /**
   * Gap to the component above.
   *
   * @default "lg"
   */
  marginTop?: "sm" | "lg" | "none"
  /**
   * Title on top of the section.
   */
  title?: string
  /**
   * Css classes to set to the section element.
   */
  className?: string
}

const {
  id,
  maxWidth = "wide",
  marginTop = "lg",
  title,
  className,
} = Astro.props

const items = ["blue", "green", "pink", "yellow", "orange", "cyan"]
---

<section
  class="mx-auto px-4 md:px-8"
  class:list={[
    sectionMaxWidths[maxWidth],
    sectionMarginTopValues[marginTop],
    className,
  ]}
  id={id}
>
  {
    title && (
      <h2 class="mb-10 text-balance text-2xl font-bold text-gray-700 sm:mb-1 sm:text-3xl">
        <a href="/en/media">
          {title}
          <Icon
            className="mdi--chevron-right align-bottom text-4xl"
            ariaLabel=""
          />
        </a>
      </h2>
    )
  }
  <div class="mb-3 hidden justify-end gap-1 sm:flex">
    <!-- todo translate aria labels -->
    <button
      data-button-prev
      class="flex h-8 w-8 items-center justify-center rounded-full border border-gray-200 bg-gray-200 text-gray-600 hover:outline hover:outline-gray-300 disabled:bg-transparent disabled:text-gray-400 disabled:hover:outline-none"
      ><Icon className="mdi--chevron-left" ariaLabel="Previous" /></button
    >
    <button
      data-button-next
      class="flex h-8 w-8 items-center justify-center rounded-full border border-gray-200 bg-gray-200 text-gray-600 hover:outline hover:outline-gray-300 disabled:bg-transparent disabled:text-gray-400 disabled:hover:outline-none"
      ><Icon className="mdi--chevron-right" ariaLabel="Next" /></button
    >
  </div>

  <div data-slider class="overflow-hidden">
    <ol class="flex items-end gap-8 transition-[height] duration-200">
      {
        items.map((item) => (
          <li
            class="scroll-item"
            style={`background-color:${item};`}
            class:list={[item === "cyan" ? "h-96" : "h-72"]}
          />
        ))
      }
    </ol>
  </div>

  <script>
    import EmblaCarousel from "embla-carousel"
    import AutoHeight from "embla-carousel-auto-height"

    const slider: HTMLElement | null = document.querySelector("[data-slider]")
    if (slider) {
      const embla = EmblaCarousel(
        slider,
        {
          loop: false,
          align: "start",
          dragFree: true,
        },
        [AutoHeight()],
      )
      const prevBtn =
        document.querySelector<HTMLButtonElement>("[data-button-prev]")
      const nextBtn =
        document.querySelector<HTMLButtonElement>("[data-button-next]")

      prevBtn?.addEventListener("click", () => embla.scrollPrev())
      nextBtn?.addEventListener("click", () => embla.scrollNext())

      const updateButtons = () => {
        if (embla.canScrollPrev()) {
          prevBtn?.removeAttribute("disabled")
        } else {
          prevBtn?.setAttribute("disabled", "disabled")
        }

        if (embla.canScrollNext()) {
          nextBtn?.removeAttribute("disabled")
        } else {
          nextBtn?.setAttribute("disabled", "disabled")
        }
      }
      embla
        .on("init", updateButtons)
        .on("select", updateButtons)
        .on("reInit", updateButtons)
    }
  </script>
</section>
<style is:global>
  .scroll-item {
    flex: 0 0 auto;
    width: 85%;
  }

  /* sm - show 2 full items + part of the next */
  @media (min-width: 640px) {
    .scroll-item {
      width: calc((100% - 2rem) / 2.3); /* 2 full + part of third */
    }
  }

  /* md - show 3 columns */
  @media (min-width: 768px) {
    .scroll-item {
      width: calc((100% - 4rem) / 3); /* 3 gaps of 16px */
    }
  }

  /* lg - show 4 columns */
  @media (min-width: 1024px) {
    .scroll-item {
      width: calc((100% - 6rem) / 4); /* 4 items view - default */
    }
  }
</style>
